/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;
import Logic.*;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JWindow;
import javax.swing.SwingConstants;
import javax.swing.Timer;
/**
 * Name: EditEmployeeForm
 *@author zainab
 @version 1.0
 * 
 * Purpose/Description: 
 * This class provides a GUI form that allows the user to edit the details of an existing employee.
 * It enables modification of employee's name, surname, gender, address, department, and pay level.
 * The updated details are validated and saved into the main employee list upon confirmation.
 * Features:
 * - Pre-loads employee information into the form fields.
 * - Allows editing of first name, last name, gender, address, department, and pay level.
 * - Validates user input for completeness and correctness.
 * - Updates the shared employee list in the main application upon saving changes.
 * - Provides cancellation to close the form without changes.
 * Effect: 
 * Allows users to update employee information through an interactive form interface.
 * user-friendly form.
 */

public class EditEmployeeForm extends javax.swing.JFrame {
    
    private Employee selectedEmployee; //Purpose: The employee currently selected for editing
    private MainWindow main; //Purpose: Reference to the main application window, used for accessing shared data and methods
    private ArrayList<Department> departments; //Purpose: List of departments available in the organization, used to populate department combo box

     /**
     * Constructor: EditEmployeeForm
     * Initializes the form with the existing employee's information preloaded.
     * 
     * @param mainWindow Reference to the main application window to access shared data.
     * @param employee The employee object whose data is being edited.
     */

    public EditEmployeeForm(MainWindow mainWindow, Employee employee) {
        this.main = mainWindow;  // Properly initialize main with the passed MainWindow
        this.selectedEmployee = employee;  // Set the selected employee to be edited
        this.departments = mainWindow.departments;  // Now access departments from the MainWindow
           
        // Initialize GUI components generated by the Form Editor
        initComponents();
        // Center the form on the screen
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - this.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - this.getHeight()) / 2);
        this.setLocation(x, y);
        populateDepartmentsComboBox();      // Populate the combo box
        populatePayLevelComboBox();         // Populate the pay level combo box



        
        // Pre-fill the form fields with employee's current data
        firstNameEditField.setText(employee.getFirstName());
        lastNameEditField.setText(employee.getSurname());
        addressEditField.setText(employee.getAddress());
        
        // Select the correct gender radio button
        if(employee.getGender() == 'M')
        {
            maleEditButton.setSelected(true);
        }
        
        else if(employee.getGender() == 'F')
        {
            femaleEditButton.setSelected(true);
        }
       
        // add department
        preSelectDepartment();   
        
        
        // add pay level 
        preSelectPayLevel();                
        
    }
    /**
     * Name: populateDepartmentsComboBox
     * Purpose:
     * Populates the department combo box with all departments available from the main window.
     * Adds a "No Department" option for employees without a department.
     * 
     * Effect:
     * Clears any existing items in the combo box and reloads them.
     */
    private void populateDepartmentsComboBox() {
        departmentEditCombo.removeAllItems();  

        departmentEditCombo.addItem("No Department");

        for (Department dept : departments) {
            departmentEditCombo.addItem(dept.getName());  
        }
    }
     /**
     * Name: preSelectDepartment
     * Purpose:
     * Sets the selected department in the combo box to match the employee's current department.
     * If the employee has no department assigned, "No Department" is selected.
     * 
     * Effect:
     * Changes the combo box selection to the employee's department.
     */
    private void preSelectDepartment() {
        // Get the department ID of the current employee
        Integer deptID = selectedEmployee.getDeptID();
        String departmentName = "No Department";  // Default if no department is assigned

        if (deptID != null) {
            // Look up the department name by its ID
            departmentName = Department.getDepartmentNameById(departments, deptID);
        }

        // Set the selected item in the combo box to the employee's current department
        departmentEditCombo.setSelectedItem(departmentName);
    }
    
     /**
     * Name: preSelectDepartment
     * Purpose:
     * Sets the selected department in the combo box to match the employee's current department.
     * If the employee has no department assigned, "No Department" is selected.
     * 
     * Effect:
     * Changes the combo box selection to the employee's department.
     */
    private void preSelectPayLevel() {
            int payLevel = selectedEmployee.getPayLevel();

            switch (payLevel) {
                case 1:
                    payLevelEditCombo.setSelectedItem("Level 1 - BHD 44,245.75");
                    break;
                case 2:
                    payLevelEditCombo.setSelectedItem("Level 2 - BHD 48,670.32");
                    break;
                case 3:
                    payLevelEditCombo.setSelectedItem("Level 3 - BHD 53,537.35");
                    break;
                case 4:
                    payLevelEditCombo.setSelectedItem("Level 4 - BHD 58,891.09");
                    break;
                case 5:
                    payLevelEditCombo.setSelectedItem("Level 5 - BHD 64,780.20");
                    break;
                case 6:
                    payLevelEditCombo.setSelectedItem("Level 6 - BHD 71,258.22");
                    break;
                case 7:
                    payLevelEditCombo.setSelectedItem("Level 7 - BHD 80,946.95");
                    break;
                case 8:
                    payLevelEditCombo.setSelectedItem("Level 8 - BHD 96,336.34");
                    break;
                default:
                    payLevelEditCombo.setSelectedItem("Select Annual Salary");
                    break;
            }
        }

    /**
     * Name: populatePayLevelComboBox
     * Purpose:
     * Populates the pay level combo box with predefined salary levels.
     * 
     * Effect:
     * Clears existing items and adds salary levels for selection.
     */
    private void populatePayLevelComboBox() {
        payLevelEditCombo.removeAllItems();  // Clear all existing items

        payLevelEditCombo.addItem("Select Annual Salary");
        payLevelEditCombo.addItem("Level 1 - BHD 44,245.75");
        payLevelEditCombo.addItem("Level 2 - BHD 48,670.32");
        payLevelEditCombo.addItem("Level 3 - BHD 53,537.35");
        payLevelEditCombo.addItem("Level 4 - BHD 58,891.09");
        payLevelEditCombo.addItem("Level 5 - BHD 64,780.20");
        payLevelEditCombo.addItem("Level 6 - BHD 71,258.22");
        payLevelEditCombo.addItem("Level 7 - BHD 80,946.95");
        payLevelEditCombo.addItem("Level 8 - BHD 96,336.34");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editGenderGroup = new javax.swing.ButtonGroup();
        jLabel22 = new javax.swing.JLabel();
        departmentEditCombo = new javax.swing.JComboBox<>();
        cancelButton1 = new javax.swing.JButton();
        maleEditButton = new javax.swing.JRadioButton();
        lastNameEditField = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        addressEditField = new javax.swing.JTextArea();
        jLabel25 = new javax.swing.JLabel();
        firstNameEditField = new javax.swing.JTextField();
        femaleEditButton = new javax.swing.JRadioButton();
        jLabel26 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        payLevelEditCombo = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        saveEditButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel22.setText("First Name");

        departmentEditCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentEditComboActionPerformed(evt);
            }
        });

        cancelButton1.setText("Cancel");
        cancelButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButton1ActionPerformed(evt);
            }
        });

        editGenderGroup.add(maleEditButton);
        maleEditButton.setText("Male");
        maleEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maleEditButtonActionPerformed(evt);
            }
        });

        lastNameEditField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameEditFieldActionPerformed(evt);
            }
        });

        jLabel24.setText("Last Name");

        addressEditField.setColumns(20);
        addressEditField.setRows(5);
        jScrollPane3.setViewportView(addressEditField);

        jLabel25.setText("Department");

        firstNameEditField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameEditFieldActionPerformed(evt);
            }
        });

        editGenderGroup.add(femaleEditButton);
        femaleEditButton.setText("Female");

        jLabel26.setText("Gender");

        jLabel19.setText("Pay Level");

        payLevelEditCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select pay level", "Item 2", "Item 3", "Item 4" }));
        payLevelEditCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payLevelEditComboActionPerformed(evt);
            }
        });

        jLabel21.setText("Address");

        saveEditButton.setText("Save Changes");
        saveEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEditButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(268, 268, 268)
                        .addComponent(cancelButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveEditButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addGap(146, 146, 146)
                                .addComponent(jLabel24))
                            .addComponent(jLabel26)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(maleEditButton)
                                .addGap(18, 18, 18)
                                .addComponent(femaleEditButton))
                            .addComponent(jLabel19)
                            .addComponent(jLabel25)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21)
                            .addComponent(departmentEditCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(firstNameEditField, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lastNameEditField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(payLevelEditCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lastNameEditField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(firstNameEditField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(jLabel22))
                        .addGap(29, 29, 29)))
                .addGap(18, 18, 18)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maleEditButton)
                    .addComponent(femaleEditButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(departmentEditCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(payLevelEditCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton1)
                    .addComponent(saveEditButton))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Event Handler: cancelButton1ActionPerformed
     * Purpose:
     * Responds to Cancel button click by closing the edit form without saving changes.
     * 
     * Effect:
     * Disposes the current form and returns control to the main window.
     */
    private void cancelButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButton1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_cancelButton1ActionPerformed
    /**
    * Name: maleEditButtonActionPerformed
    * Purpose/description: Handles the action event triggered when the male gender edit button is clicked.
    * Typically used to set or update the gender field to "Male" during editing.
    * @param evt - the ActionEvent triggered by clicking the male edit button.
    * @return void
    */
    private void maleEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleEditButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maleEditButtonActionPerformed
    /**
     * Name: lastNameEditFieldActionPerformed
     * Purpose/description: Handles the action event when the last name edit text field triggers an action.
     * Usually occurs when the user presses Enter after editing the last name.
     * @param evt - the ActionEvent triggered by the last name text field.
     * @return void
     */
    private void lastNameEditFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameEditFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastNameEditFieldActionPerformed
    /**
     * Name: firstNameEditFieldActionPerformed
     * Purpose/description: Handles the action event when the first name edit text field triggers an action.
     *  Usually occurs when the user presses Enter after editing the first name.
     * @param evt - the ActionEvent triggered by the first name text field.
     * @return void
     */
    private void firstNameEditFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameEditFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameEditFieldActionPerformed
    /**
     * Event Handler: saveEditButtonActionPerformed
     * Purpose:
     * Validates user input and saves the updated employee information back to the main employee list.
     * 
     * Steps:
     * - Retrieves all form inputs.
     * - Validates that all required fields are filled and correctly formatted.
     * - Converts selected department and pay level to internal codes/IDs.
     * - Updates the employee object.
     * - Replaces the employee entry in the main employee list.
     * - Shows success or error messages.
     * - Refreshes the main window's employee table and details view.
     * - Closes the edit form.
     * 
     * Exception Handling:
     * - Shows a JOptionPane error dialog if any validation fails.
     */
    private void saveEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveEditButtonActionPerformed
        // TODO add your handling code here:
        try {
        // Get the updated employee information
        String firstName = firstNameEditField.getText().trim();
        String surname = lastNameEditField.getText().trim();
        String address = addressEditField.getText().trim();

        char gender = ' ';
        if (maleEditButton.isSelected()) {
            gender = 'M';
        } else if (femaleEditButton.isSelected()) {
            gender = 'F';
        }

        // Get selected department
        String selectedDepartment = (String) departmentEditCombo.getSelectedItem();
        Integer deptID = null;  // Default to no department
        
        //Check if employee is head of a department
        if(selectedDepartment.equals("No Department") && selectedEmployee.isIsHead() == true) {
            JOptionPane.showMessageDialog(this, "Cannot delete employee from the department.\nEmployee is a head of a department", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (selectedDepartment != null && !selectedDepartment.equals("No Department")) {
            for (Department dept : departments) {
                
                if(selectedEmployee.isIsHead() && selectedEmployee.getDeptID() != dept.getDeptID() && !dept.getName().equals(selectedDepartment)) {
                        JOptionPane.showMessageDialog(this, "Cannot change employee's department.\nEmployee is a head of a department", "Input Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                
                else if (dept.getName().equals(selectedDepartment)) {
                        deptID = dept.getDeptID();
                        break;
                    }

            }
        }

        // Validate and set pay level
        String selectedPayLevel = (String) payLevelEditCombo.getSelectedItem();
        int payLevel = -1;  // Default to invalid level

        if (selectedPayLevel != null && !selectedPayLevel.equals("Select Annual Salary")) {
            String[] parts = selectedPayLevel.split(" - ");
            if (parts.length == 2) {
                try {
                    payLevel = Integer.parseInt(parts[0].replace("Level ", "").trim());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Invalid pay level selected.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        }

        // Validate that all required fields are filled
        if (firstName.isEmpty() || surname.isEmpty() || gender == ' ' || payLevel == -1 || address.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all required fields and select valid options.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //Validate input is only strings
            if (!firstName.matches("[a-zA-Z]+")) {
                JOptionPane.showMessageDialog(this, "Please enter only letters.", "Input Error", JOptionPane.WARNING_MESSAGE);
                firstNameEditField.requestFocus();
                return;
            }  
            
        //Validate input is only strings
            if (!surname.matches("[a-zA-Z]+")) {
                JOptionPane.showMessageDialog(this, "Please enter only letters.", "Input Error", JOptionPane.WARNING_MESSAGE);
                lastNameEditField.requestFocus();
                return;
            } 
        
        
        // Update the selected employee object
        if (selectedEmployee != null) {
            selectedEmployee.setFirstName(firstName);
            selectedEmployee.setSurname(surname);
            selectedEmployee.setGender(gender);
            selectedEmployee.setAddress(address);
            selectedEmployee.setDeptID(deptID);
            selectedEmployee.setPayLevel(payLevel);

            // Update the allEmployees list - is this needed??
            for (int i = 0; i < main.allEmployees.size(); i++) {
                if (main.allEmployees.get(i).getEmployeeId() == selectedEmployee.getEmployeeId()) {
                    main.allEmployees.set(i, selectedEmployee);
                    break;
                }
            }

            JOptionPane.showMessageDialog(this, "Employee information updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            
            // Refresh the employee table and detail page
            main.updateEmployeeDetails(selectedEmployee);
            main.refreshEmployeeTable();
            main.refreshDepartmentTable();
        }

        main.setEnabled(true);
        this.dispose();

    } catch (NullPointerException e) {
        JOptionPane.showMessageDialog(this, "An error occurred while updating the employee: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
                


    }//GEN-LAST:event_saveEditButtonActionPerformed

    /**
    * Name: departmentEditComboActionPerformed
    * Purpose/description: Handles the event when a department is selected 
    *                     from the departmentEditCombo combo box.
    *                     Use this method to respond to changes in the selected 
    *                     department, such as updating related fields.
    * @param evt - the ActionEvent triggered by selecting a department.
    * @return void
    */
    private void departmentEditComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentEditComboActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_departmentEditComboActionPerformed
    /**
     * Name: payLevelEditComboActionPerformed
     * Purpose/description: Handles the event when a pay level is selected 
     *                     from the payLevelEditCombo combo box.
     *                     Use this method to respond to changes in the selected 
     *                     pay level, like updating salary or role information.
     * @param evt - the ActionEvent triggered by selecting a pay level.
     * @return void
     */
    private void payLevelEditComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payLevelEditComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_payLevelEditComboActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditEmployeeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditEmployeeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditEmployeeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditEmployeeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new EditEmployeeForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea addressEditField;
    private javax.swing.JButton cancelButton1;
    private javax.swing.JComboBox<String> departmentEditCombo;
    private javax.swing.ButtonGroup editGenderGroup;
    private javax.swing.JRadioButton femaleEditButton;
    private javax.swing.JTextField firstNameEditField;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField lastNameEditField;
    private javax.swing.JRadioButton maleEditButton;
    private javax.swing.JComboBox<String> payLevelEditCombo;
    private javax.swing.JButton saveEditButton;
    // End of variables declaration//GEN-END:variables
}
